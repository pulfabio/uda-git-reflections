How did viewing a diff between two versions of a file help you see the bug that was introduced?
It compared the two files and showed the differences between them.
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
If at some point I realize that I broke my file I can go back to a working version and start over from there.
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Pros: The logic and size of commits are controlled by the programmer.
Cons: the programmer might forget to save commits and te system doesn't provide a back up plan.
Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Because Git's focus is on program files and program files belonging to the same project can be strongly interrelated.
How can you use the commands git log and git diff to view the history of files?
Git log gives me the history of the commits.
Git diff gives me the differences between commits, and therefore the changes introduced.
How might using version control make you more confident to make changes that could break something?
You know that you can always go back to a commit that doesn't have a bug.
Now that you have your workspace set up, what do you want to try using Git for?
Saving versions of my projects.